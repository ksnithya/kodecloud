We have some images present on one of the internal registry. These images need to be used by number of applications that will be deployed on Kubernetes cluster. We need to add an ImagePullSecrets and need to make sure its been used as default secret to pull the images from this registry. Below you can find more details about the same.


Add ImagePullSecrets to a service account

As per details mentioned below create a Secret with a Docker Config:
a.) name of Secret should be myregistrykey

b.) values :

docker-server=SERVER

docker-username=sam

docker-password=Rc5C9EyvbU

docker-email=samkke@gmail.com

Add ImagePullSecrets to a service account
Create an imagePullSecret
Create an imagePullSecret, as described in Specifying ImagePullSecrets on a Pod.

kubectl create secret docker-registry myregistrykey --docker-server=SERVER \
        --docker-username=sam --docker-password=Rc5C9EyvbU \
        --docker-email=samkke@gmail.com

c.) Modify the default service account for the default namespace to use this secret as an imagePullSecret.
kubectl patch serviceaccount default -p '{"imagePullSecrets": [{"name": "myregistrykey"}]}'
thor@jump_host /$ kubectl get serviceaccounts default -o yaml
apiVersion: v1
imagePullSecrets:
- name: myregistrykey
kind: ServiceAccount
metadata:
  creationTimestamp: "2020-09-07T13:41:39Z"
  name: default
  namespace: default
  resourceVersion: "3053"
  selfLink: /api/v1/namespaces/default/serviceaccounts/default
  uid: 60b20ffc-b2d1-457e-9864-46e793435a50
secrets:
- name: default-token-sk45f

Note: The kubectl utility on jump_host has been configured to work with the kubernetes cluster.



thor@jump_host /$ kubectl create secret docker-registry myregistrykey --docker-server=SERVER \
>         --docker-username=sam --docker-password=Rc5C9EyvbU \
>         --docker-email=samkke@gmail.com
secret/myregistrykey created
thor@jump_host /$ kubectl get secrets
NAME                  TYPE                                  DATA   AGE
default-token-nsdvw   kubernetes.io/service-account-token   3      102s
myregistrykey         kubernetes.io/dockerconfigjson        1      7s
thor@jump_host /$ kubectl edit serviceaccount default -n default
serviceaccount/default edited
thor@jump_host /$ kubectl describe serviceaccount default -n default
Name:                default
Namespace:           default
Labels:              <none>
Annotations:         <none>
Image pull secrets:  myregistrykey
Mountable secrets:   default-token-nsdvw
Tokens:              default-token-nsdvwEvents:              <none>
thor@jump_host /$ kubectl run nginx --image=nginx --restart=Never
pod/nginx created
thor@jump_host /$ kubectl get pod nginx -o=jsonpath='{.spec.imagePullSecrets[0].name}{"\n"}'
myregistrykey
thor@jump_host /$

thor@jump_host /$ kubectl get pod nginx -o yaml
apiVersion: v1
kind: Pod
metadata:
  creationTimestamp: "2020-09-07T14:22:20Z"
  labels:
    run: nginx
  name: nginx
  namespace: default
  resourceVersion: "770"
  selfLink: /api/v1/namespaces/default/pods/nginx
  uid: 7a1f9876-6c84-424b-9453-53a571570ac9
spec:
  containers:
  - image: nginx
    imagePullPolicy: Always
    name: nginx
    resources: {}
    terminationMessagePath: /dev/termination-log
    terminationMessagePolicy: File
    volumeMounts:
    - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
      name: default-token-nsdvw
      readOnly: true
  dnsPolicy: ClusterFirst
  enableServiceLinks: true
  imagePullSecrets:
  - name: myregistrykey
  nodeName: node01
  priority: 0
  restartPolicy: Never
  schedulerName: default-scheduler
  securityContext: {}
  serviceAccount: default
  serviceAccountName: default
  terminationGracePeriodSeconds: 30
  tolerations:
  - effect: NoExecute
    key: node.kubernetes.io/not-ready
    operator: Exists
    tolerationSeconds: 300
  - effect: NoExecute
    key: node.kubernetes.io/unreachable
    operator: Exists
    tolerationSeconds: 300
  volumes:
  - name: default-token-nsdvw
    secret:
      defaultMode: 420
      secretName: default-token-nsdvw
status:
  conditions:
  - lastProbeTime: null
    lastTransitionTime: "2020-09-07T14:22:20Z"
    status: "True"
    type: Initialized
  - lastProbeTime: null
    lastTransitionTime: "2020-09-07T14:22:28Z"
    status: "True"
    type: Ready
  - lastProbeTime: null
    lastTransitionTime: "2020-09-07T14:22:28Z"
    status: "True"
    type: ContainersReady
  - lastProbeTime: null
    lastTransitionTime: "2020-09-07T14:22:20Z"
    status: "True"
    type: PodScheduled
  containerStatuses:
  - containerID: docker://90355c0cd17baa74c2c0b6549d0c3e5720583534bae2a95438f9c6d02cfe9e01
    image: nginx:latest
    imageID: docker-pullable://nginx@sha256:b0ad43f7ee5edbc0effbc14645ae7055e21bc1973aee5150745632a24a752661
    lastState: {}
    name: nginx
    ready: true
    restartCount: 0
    started: true
    state:
      running:
        startedAt: "2020-09-07T14:22:27Z"
  hostIP: 172.17.0.30
  phase: Running
  podIP: 10.32.0.2
  podIPs:
  - ip: 10.32.0.2
  qosClass: BestEffort
  startTime: "2020-09-07T14:22:20Z"
thor@jump_host /$